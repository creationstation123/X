function Search-ShareForPatterns {
    param (
        [string]$shareListPath,  # Path to the file containing the list of shares
        [string]$outputCsvPath   # Path to the output CSV file
    )

    # Get the list of shares from the file
    $sharelist = Get-Content $shareListPath

    # Loop through each share
    foreach ($share in $sharelist) {
        # Extract hostname and sharename from each share path
        $hostname, $shareName = $share.TrimStart("\\").Split("\", 2)

        try {
            # Create a temporary PSDrive to the current share
            New-PSDrive -Name "TempShare" -PSProvider FileSystem -Root $share -ErrorAction Stop

            # Check if the drive was mounted successfully
            if (Test-Path "TempShare:\") {
                # Get all .ps1, .ps, and .txt files recursively
                Get-ChildItem -Path "TempShare:\" -Recurse -ErrorAction SilentlyContinue | 
                Where-Object { $_.Extension -in '.ps1', '.ps', '.txt' } | 
                ForEach-Object { 
                    if (Select-String -Path $_.FullName -Pattern 'ConvertTo-SecureString', "-Password" -ErrorAction SilentlyContinue) {
 
                        # Create a custom object and append to the CSV
                        [PSCustomObject]@{
                            Hostname = $hostname
                            ShareName = $shareName
                            FilePath = $_.FullName
                        } | Export-Csv -Path $outputCsvPath -NoTypeInformation -Append
                    }
                }
                # Remove the PSDrive after processing the share
                Remove-PSDrive -Name "TempShare"
            } else {
                Write-Host "Unable to connect to share: $share"
            }
        } catch {
            Write-Warning "Error connecting to or processing share: $share. Error: $_"
            if (Get-PSDrive -Name "TempShare" -ErrorAction SilentlyContinue) {
                Remove-PSDrive -Name "TempShare"
            }
        }
    }

    Write-Host "Search completed. Results saved to: $outputCsvPath"
}

# Example usage
# Search-ShareForPatterns -shareListPath "C:\Path\To\Sharelist.txt" -outputCsvPath "C:\Path\To\Results.csv"
